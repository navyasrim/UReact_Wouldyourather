{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\navya\\\\Desktop\\\\Navya_UI\\\\Wyrather\\\\wyr\\\\src\\\\components\\\\Dashboard.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Pollresults from '../components/Pollresults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Dashboard extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"dashboard-title\",\n        children: \" Your Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"dashboard-nav-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            backgroundColor: !toggleAnswered ? 'cyan' : 'grey',\n            color: !toggleAnswered ? 'orchid' : 'black'\n          },\n          onClick: this.toggleUnanswered,\n          id: \"unanswered-nav\",\n          className: \"dashboard-nav\",\n          children: \"Unanswered Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            backgroundColor: toggleAnswered ? 'cyan' : 'grey',\n            color: toggleAnswered ? 'orchid' : 'black'\n          },\n          onClick: this.toggleAnswered,\n          id: \"answered-nav\",\n          className: \"dashboard-nav\",\n          children: \"Answered Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }, this), toggleAnswered ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"dashboard-list\",\n        children: this.props.answeredQuestionIds.map(id => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"question-card-container\",\n          children: /*#__PURE__*/_jsxDEV(QuestionCard, {\n            id: id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 33\n          }, this)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"dashboard-list\",\n        children: this.props.unansweredQuestionIds.map(id => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"question-card-container\",\n          children: /*#__PURE__*/_jsxDEV(QuestionCard, {\n            id: id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 33\n          }, this)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps({\n  questions,\n  authedUser,\n  users\n}) {\n  //sort by timestamp\n  const questionIds = Object.keys(questions).sort((a, b) => questions[b].timestamp - questions[a].timestamp);\n  const authedUserAnswers = Object.keys(users[authedUser].answers);\n  const answeredQuestionIds = [];\n  const unansweredQuestionIds = []; //sorts questions into answered and unanswered arrays\n\n  questionIds.map(id => {\n    if (authedUserAnswers.includes(id)) {\n      answeredQuestionIds.push(id);\n      return id;\n    } else {\n      unansweredQuestionIds.push(id);\n      return id;\n    }\n  });\n  return {\n    questionIds: Object.keys(questions).sort((a, b) => questions[b].timestamp - questions[a].timestamp),\n    answeredQuestionIds,\n    unansweredQuestionIds\n  };\n}\n\nexport default connect(mapStateToProps)(Dashboard);","map":{"version":3,"sources":["C:/Users/navya/Desktop/Navya_UI/Wyrather/wyr/src/components/Dashboard.js"],"names":["React","Component","connect","Pollresults","Dashboard","render","backgroundColor","toggleAnswered","color","toggleUnanswered","props","answeredQuestionIds","map","id","unansweredQuestionIds","mapStateToProps","questions","authedUser","users","questionIds","Object","keys","sort","a","b","timestamp","authedUserAnswers","answers","includes","push"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Pollresults from '../components/Pollresults'\r\n\r\nclass Dashboard extends Component {\r\n    render() {\r\n\r\n        return (\r\n            <div className='dashboard'>\r\n                <h3 className='dashboard-title'> Your Questions</h3>\r\n                <nav className='dashboard-nav-bar'>\r\n                    <span style={{\r\n                        backgroundColor: !toggleAnswered ? 'cyan' : 'grey',\r\n                        color: !toggleAnswered ? 'orchid' : 'black'\r\n                    }}\r\n                        onClick={this.toggleUnanswered}\r\n                        id='unanswered-nav'\r\n                        className=\"dashboard-nav\">\r\n\r\n                        Unanswered Questions\r\n          </span>\r\n                    <span style={{\r\n                        backgroundColor: toggleAnswered ? 'cyan' : 'grey',\r\n                        color: toggleAnswered ? 'orchid' : 'black'\r\n                    }}\r\n                        onClick={this.toggleAnswered}\r\n                        id='answered-nav'\r\n                        className=\"dashboard-nav\">\r\n\r\n                        Answered Questions\r\n          </span>\r\n                </nav>\r\n                {toggleAnswered ?\r\n                    <ul className='dashboard-list'>\r\n                        {this.props.answeredQuestionIds.map((id) => (\r\n                            <li key={id} className=\"question-card-container\">\r\n                                <QuestionCard id={id} />\r\n                            </li>\r\n                        ))}\r\n                    </ul> :\r\n                    <ul className='dashboard-list'>\r\n                        {this.props.unansweredQuestionIds.map((id) => (\r\n                            <li key={id} className=\"question-card-container\">\r\n                                <QuestionCard id={id} />\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                }\r\n\r\n              </div>\r\n            )\r\n    }\r\n\r\n}\r\nfunction mapStateToProps({ questions, authedUser, users }) {\r\n\r\n\r\n    //sort by timestamp\r\n    const questionIds = Object.keys(questions)\r\n        .sort((a, b) => questions[b].timestamp - questions[a].timestamp);\r\n\r\n    const authedUserAnswers = Object.keys(users[authedUser].answers);\r\n\r\n    const answeredQuestionIds = [];\r\n\r\n    const unansweredQuestionIds = [];\r\n\r\n\r\n    //sorts questions into answered and unanswered arrays\r\n    questionIds.map((id) => {\r\n        if (authedUserAnswers.includes(id)) {\r\n            answeredQuestionIds.push(id);\r\n            return id;\r\n        }\r\n        else {\r\n            unansweredQuestionIds.push(id);\r\n            return id;\r\n        }\r\n    })\r\n\r\n\r\n    return {\r\n        questionIds: Object.keys(questions)\r\n            .sort((a, b) => questions[b].timestamp - questions[a].timestamp),\r\n        answeredQuestionIds,\r\n        unansweredQuestionIds,\r\n\r\n    }\r\n}\r\nexport default connect(mapStateToProps) (Dashboard)\r\n"]},"metadata":{},"sourceType":"module"}