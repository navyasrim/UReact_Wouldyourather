{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\navya\\\\Desktop\\\\Navya_UI\\\\Wyrather\\\\wyr\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { handleInitialData } from '../actions/shared';\nimport Login from '../components/Login';\nimport { setAuthedUser } from '../actions/authedUser';\nimport LoadingBar from 'react-redux-loading';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  //when component mounts we want to dispatch invocation of handleInitialData action creator\n  componentDidMount() {\n    this.props.dispatch(handleInitialData());\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(LoadingBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this), this.props.authedUser === true ? null : /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps({\n  authedUser\n}) {\n  return {\n    //loading will be true if null\n    loading: authedUser === null,\n    authedUser\n  };\n} //we need to connect our App component  to get invocation \n\n\nexport default connect(mapStateToProps)(App);","map":{"version":3,"sources":["C:/Users/navya/Desktop/Navya_UI/Wyrather/wyr/src/components/App.js"],"names":["React","Component","connect","handleInitialData","Login","setAuthedUser","LoadingBar","App","componentDidMount","props","dispatch","render","authedUser","mapStateToProps","loading"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAO,WAAP;;;AAGA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AACxB;AACAO,EAAAA,iBAAiB,GAAG;AAEhB,SAAKC,KAAL,CAAWC,QAAX,CAAoBP,iBAAiB,EAArC;AAEH;;AACDQ,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cADJ,EAEK,KAAKF,KAAL,CAAWG,UAAX,KAA0B,IAA1B,GACK,IADL,gBAEK,QAAE,KAAF;AAAA;AAAA;AAAA;AAAA,cAJV;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAUH;;AAlBuB;;AAqB5B,SAASC,eAAT,CAAyB;AAAED,EAAAA;AAAF,CAAzB,EAAyC;AACrC,SAAO;AACH;AACJE,IAAAA,OAAO,EAAGF,UAAU,KAAK,IAFlB;AAGJA,IAAAA;AAHI,GAAP;AAMH,C,CACD;;;AACA,eAAeV,OAAO,CAACW,eAAD,CAAP,CAA0BN,GAA1B,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { handleInitialData } from '../actions/shared'\nimport Login from '../components/Login'\nimport { setAuthedUser } from '../actions/authedUser'\nimport LoadingBar from 'react-redux-loading'\nimport './App.css'\n\n\nclass App extends Component {\n    //when component mounts we want to dispatch invocation of handleInitialData action creator\n    componentDidMount() {\n\n        this.props.dispatch(handleInitialData())\n\r\n    }\n    render() {\n        return (\n            <div>\n                <LoadingBar />\n                {this.props.authedUser === true\n                    ? null\r\n                    : < Login />\r\n                }\n               \n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps({ authedUser }) {\r\n    return {\r\n        //loading will be true if null\r\n    loading : authedUser === null,\r\n       authedUser,\r\n       }\r\n\r\n}\n//we need to connect our App component  to get invocation \nexport default connect(mapStateToProps) (App)\n"]},"metadata":{},"sourceType":"module"}