{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\navya\\\\Desktop\\\\Navya_UI\\\\Wyrather\\\\wyr\\\\src\\\\components\\\\Pollresults.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport images from '../components/images/images';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Pollresults extends Component {\n  render() {\n    //question card\n    const {\n      question,\n      author,\n      id\n    } = this.props;\n\n    if (question === null) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" This Question doesn't exist \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 20\n      }, this);\n    }\n\n    const image = author.avatarURL;\n    return /*#__PURE__*/_jsxDEV(Link, {\n      to: `/question/${id}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"displayGrid-items\",\n        children: [author.name, \" asks:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"avatar\",\n        src: images[image],\n        alt: `avatar of ${author.name}`,\n        style: {\n          width: '120px',\n          height: '80px',\n          marginTop: '20px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \" Would You Rather\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"...\", question.optionOne.text.slice(0, 500), \"...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \" View Poll\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps({\n  authedUser,\n  users,\n  questions\n}, {\n  id\n}) {\n  let userAnswers = users[authedUser].answers; //will be -1 if question is unanswered\n\n  let hasAnswered = Object.keys(userAnswers).indexOf(id);\n  return {\n    authedUser,\n    question: questions[id] ? questions[id] : null,\n    hasAnswered,\n    author: users[questions[id].author],\n    id\n  };\n}\n\nexport default connect(mapStateToProps)(Pollresults);","map":{"version":3,"sources":["C:/Users/navya/Desktop/Navya_UI/Wyrather/wyr/src/components/Pollresults.js"],"names":["React","Component","connect","Link","images","Pollresults","render","question","author","id","props","image","avatarURL","name","width","height","marginTop","optionOne","text","slice","mapStateToProps","authedUser","users","questions","userAnswers","answers","hasAnswered","Object","keys","indexOf"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;;;AAEA,MAAMC,WAAN,SAA0BJ,SAA1B,CAAoC;AAChCK,EAAAA,MAAM,GAAG;AACL;AACA,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,MAAZ;AAAoBC,MAAAA;AAApB,QAA2B,KAAKC,KAAtC;;AACA,QAAIH,QAAQ,KAAK,IAAjB,EAAuB;AACnB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AAED,UAAMI,KAAK,GAAGH,MAAM,CAACI,SAArB;AACA,wBACI,QAAC,IAAD;AAAM,MAAA,EAAE,EAAG,aAAYH,EAAG,EAA1B;AAAA,8BAEI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA,mBACKD,MAAM,CAACK,IADZ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAKI;AACI,QAAA,SAAS,EAAC,QADd;AAEI,QAAA,GAAG,EAAET,MAAM,CAACO,KAAD,CAFf;AAGI,QAAA,GAAG,EAAG,aAAYH,MAAM,CAACK,IAAK,EAHlC;AAII,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE,OAAT;AAAkBC,UAAAA,MAAM,EAAE,MAA1B;AAAkCC,UAAAA,SAAS,EAAE;AAA7C;AAJX;AAAA;AAAA;AAAA;AAAA,cALJ,eAWI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA,4BAAUT,QAAQ,CAACU,SAAT,CAAmBC,IAAnB,CAAwBC,KAAxB,CAA8B,CAA9B,EAAiC,GAAjC,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAuBH;;AAhC+B;;AAoCpC,SAASC,eAAT,CAAyB;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,KAAd;AAAqBC,EAAAA;AAArB,CAAzB,EAA2D;AAAEd,EAAAA;AAAF,CAA3D,EAAmE;AAE/D,MAAIe,WAAW,GAAGF,KAAK,CAACD,UAAD,CAAL,CAAkBI,OAApC,CAF+D,CAG/D;;AACA,MAAIC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYJ,WAAZ,EAAyBK,OAAzB,CAAiCpB,EAAjC,CAAlB;AAEA,SAAO;AACHY,IAAAA,UADG;AAEHd,IAAAA,QAAQ,EAAEgB,SAAS,CAACd,EAAD,CAAT,GACJc,SAAS,CAACd,EAAD,CADL,GAEJ,IAJH;AAKHiB,IAAAA,WALG;AAMHlB,IAAAA,MAAM,EAAEc,KAAK,CAACC,SAAS,CAACd,EAAD,CAAT,CAAcD,MAAf,CANV;AAOHC,IAAAA;AAPG,GAAP;AAUH;;AACD,eAAeP,OAAO,CAACkB,eAAD,CAAP,CAAyBf,WAAzB,CAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport images from '../components/images/images'\r\n\r\nclass Pollresults extends Component {\r\n    render() {\r\n        //question card\r\n        const { question, author, id } = this.props;\r\n        if (question === null) {\r\n            return <p> This Question doesn't exist </p>\r\n        }\r\n\r\n        const image = author.avatarURL;\r\n        return (\r\n            <Link to={`/question/${id}`}\r\n                 >\r\n                <div className='displayGrid-items' >\r\n                    {author.name} asks:\r\n        </div>\r\n                <img\r\n                    className='avatar'\r\n                    src={images[image]}\r\n                    alt={`avatar of ${author.name}`}\r\n                    style={{ width: '120px', height: '80px', marginTop: '20px' }}\r\n                />\r\n                <div className='question-summary'>\r\n                    <strong> Would You Rather</strong>\r\n                    <br />\r\n                    <span>...{question.optionOne.text.slice(0, 500)}...</span>\r\n                    <br />\r\n                    <button> View Poll</button>\r\n                </div>\r\n            </Link>\r\n        )\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nfunction mapStateToProps({ authedUser, users, questions }, { id }) {\r\n\r\n    let userAnswers = users[authedUser].answers\r\n    //will be -1 if question is unanswered\r\n    let hasAnswered = Object.keys(userAnswers).indexOf(id);\r\n\r\n    return {\r\n        authedUser,\r\n        question: questions[id]\r\n            ? questions[id]\r\n            : null,\r\n        hasAnswered,\r\n        author: users[questions[id].author],\r\n        id,\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps)(Pollresults);"]},"metadata":{},"sourceType":"module"}