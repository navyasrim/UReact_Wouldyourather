{"ast":null,"code":"import { RECEIVE_QUESTIONS } from '../actions/questions';\nimport { ADD_NEW_QUESTION } from '../actions/questions';\nimport { ANSWER_QUESTION } from '../actions/questions'; //default state is assigned with empty object\n\nexport default function questions(state = {}, action) {\n  switch (action.type) {\n    case RECEIVE_QUESTIONS:\n      return { //new state of user slice has everything which is empty obj also\n        ...state,\n        //all of the users grabbing from the action\n        ...action.questions\n      };\n\n    case ADD_NEW_QUESTION:\n      const {\n        question\n      } = action;\n      const id = question.id;\n      return { ...state,\n        [id]: question\n      };\n\n    case ANSWER_QUESTION:\n      const {\n        qid,\n        answer,\n        authedUser\n      } = action;\n      return { ...state,\n        [qid]: { ...state[qid],\n          [answer]: { ...state[qid][answer],\n            votes: state[qid][answer].votes.concat([authedUser])\n          }\n        }\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/navya/Desktop/Navya_UI/Wyrather/wyr/src/reducers/questions.js"],"names":["RECEIVE_QUESTIONS","ADD_NEW_QUESTION","ANSWER_QUESTION","questions","state","action","type","question","id","qid","answer","authedUser","votes","concat"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,sBAAlC;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,eAAT,QAAgC,sBAAhC,C,CACA;;AACA,eAAe,SAASC,SAAT,CAAmBC,KAAK,GAAG,EAA3B,EAA+BC,MAA/B,EAAuC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,iBAAL;AACI,aAAO,EACH;AACA,WAAGI,KAFA;AAGH;AACA,WAAGC,MAAM,CAACF;AAJP,OAAP;;AAMJ,SAAKF,gBAAL;AACI,YAAM;AAAEM,QAAAA;AAAF,UAAeF,MAArB;AACA,YAAMG,EAAE,GAAGD,QAAQ,CAACC,EAApB;AACA,aAAO,EACH,GAAGJ,KADA;AAEH,SAACI,EAAD,GAAMD;AAFH,OAAP;;AAIJ,SAAKL,eAAL;AACI,YAAM;AAAEO,QAAAA,GAAF;AAAOC,QAAAA,MAAP;AAAeC,QAAAA;AAAf,UAA8BN,MAApC;AACA,aAAO,EACH,GAAGD,KADA;AAEH,SAACK,GAAD,GACA,EACI,GAAGL,KAAK,CAACK,GAAD,CADZ;AAEI,WAACC,MAAD,GACA,EACI,GAAGN,KAAK,CAACK,GAAD,CAAL,CAAWC,MAAX,CADP;AAEIE,YAAAA,KAAK,EAAER,KAAK,CAACK,GAAD,CAAL,CAAWC,MAAX,EAAmBE,KAAnB,CAAyBC,MAAzB,CAAgC,CAACF,UAAD,CAAhC;AAFX;AAHJ;AAHG,OAAP;;AAaJ;AACI,aAAOP,KAAP;AA/BR;AAkCH","sourcesContent":["import { RECEIVE_QUESTIONS } from '../actions/questions'\r\nimport { ADD_NEW_QUESTION } from '../actions/questions'\r\nimport { ANSWER_QUESTION } from '../actions/questions'\r\n//default state is assigned with empty object\r\nexport default function questions(state = {}, action) {\r\n    switch (action.type) {\r\n        case RECEIVE_QUESTIONS:\r\n            return {\r\n                //new state of user slice has everything which is empty obj also\r\n                ...state,\r\n                //all of the users grabbing from the action\r\n                ...action.questions\r\n            }\r\n        case ADD_NEW_QUESTION:\r\n            const { question } = action;\r\n            const id = question.id;\r\n            return {\r\n                ...state,\r\n                [id]: question,\r\n            }\r\n        case ANSWER_QUESTION:\r\n            const { qid, answer, authedUser } = action;\r\n            return {\r\n                ...state,\r\n                [qid]:\r\n                {\r\n                    ...state[qid],\r\n                    [answer]:\r\n                    {\r\n                        ...state[qid][answer],\r\n                        votes: state[qid][answer].votes.concat([authedUser])\r\n                    }\r\n                }\r\n            }\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}