{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\navya\\\\Desktop\\\\Navya_UI\\\\Wyrather\\\\wyr\\\\src\\\\components\\\\Dashboard.js\";\nimport React, { Component } from 'react';\nimport { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport Pollresults from '../components/Pollresults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Dashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      answered: false\n    };\n\n    this.answered = e => {\n      e.preventDefault();\n\n      if (!this.state.answered) {\n        this.setState(() => ({\n          answered: !this.state.answered\n        }));\n      }\n    };\n\n    this.unanswered = e => {\n      e.preventDefault();\n\n      if (this.state.answered) {\n        this.setState(() => ({\n          answered: !this.state.answered\n        }));\n      }\n    };\n  }\n\n  render() {\n    const {\n      answered\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"dashboard-title\",\n        children: \" Your Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"dashboard-nav-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            backgroundColor: !answered ? 'lightgray' : '',\n            color: !answered ? 'white' : 'black',\n            alignContent: 'center'\n          },\n          onClick: this.unanswered,\n          id: \"unanswered-nav\",\n          className: \"dashboard-nav\",\n          children: \"Unanswered Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            backgroundColor: answered ? 'lightgray' : '',\n            color: answered ? 'white' : 'black'\n          },\n          onClick: this.answered,\n          id: \"answered-nav\",\n          className: \"dashboard-nav\",\n          children: \"Answered Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Fragment, {\n        children: answered ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"diplayGrid\",\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            style: {\n              display: 'flow'\n            },\n            children: this.props.answeredQuestionIds.map(id => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"displayGrid-items\",\n              children: /*#__PURE__*/_jsxDEV(Pollresults, {\n                id: id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 29\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"diplayGrid\",\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            style: {\n              display: 'flow'\n            },\n            children: this.props.unansweredQuestionIds.map(id => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"displayGrid-items\",\n              children: /*#__PURE__*/_jsxDEV(Pollresults, {\n                id: id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 28\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps({\n  questions,\n  authedUser,\n  users\n}) {\n  //sort by timestamp\n  const questionIds = Object.keys(questions).sort((a, b) => questions[b].timestamp - questions[a].timestamp);\n  const authedUserAnswers = Object.keys(users[authedUser].answers);\n  const answeredQuestionIds = [];\n  const unansweredQuestionIds = []; //sorts questions into answered and unanswered arrays\n\n  questionIds.map(id => {\n    if (authedUserAnswers.includes(id)) {\n      answeredQuestionIds.push(id);\n      return id;\n    } else {\n      unansweredQuestionIds.push(id);\n      return id;\n    }\n  });\n  return {\n    questionIds: Object.keys(questions).sort((a, b) => questions[b].timestamp - questions[a].timestamp),\n    answeredQuestionIds,\n    unansweredQuestionIds\n  };\n}\n\nexport default connect(mapStateToProps)(Dashboard);","map":{"version":3,"sources":["C:/Users/navya/Desktop/Navya_UI/Wyrather/wyr/src/components/Dashboard.js"],"names":["React","Component","Fragment","connect","Pollresults","Dashboard","state","answered","e","preventDefault","setState","unanswered","render","backgroundColor","color","alignContent","display","props","answeredQuestionIds","map","id","unansweredQuestionIds","mapStateToProps","questions","authedUser","users","questionIds","Object","keys","sort","a","b","timestamp","authedUserAnswers","answers","includes","push"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;;;AAEA,MAAMC,SAAN,SAAwBJ,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAC9BK,KAD8B,GACtB;AACJC,MAAAA,QAAQ,EAAE;AADN,KADsB;;AAAA,SAI9BA,QAJ8B,GAIlBC,CAAD,IAAO;AACdA,MAAAA,CAAC,CAACC,cAAF;;AAEA,UAAI,CAAC,KAAKH,KAAL,CAAWC,QAAhB,EAA0B;AAEtB,aAAKG,QAAL,CAAc,OAAO;AACjBH,UAAAA,QAAQ,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADL,SAAP,CAAd;AAGH;AACJ,KAb6B;;AAAA,SAe9BI,UAf8B,GAehBH,CAAD,IAAO;AAChBA,MAAAA,CAAC,CAACC,cAAF;;AAGA,UAAI,KAAKH,KAAL,CAAWC,QAAf,EAAyB;AACrB,aAAKG,QAAL,CAAc,OAAO;AACjBH,UAAAA,QAAQ,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADL,SAAP,CAAd;AAGH;AACJ,KAxB6B;AAAA;;AAyB9BK,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEL,MAAAA;AAAF,QAAe,KAAKD,KAA1B;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA,gCACI;AAAM,UAAA,KAAK,EAAE;AACTO,YAAAA,eAAe,EAAE,CAACN,QAAD,GAAY,WAAZ,GAA0B,EADlC;AAETO,YAAAA,KAAK,EAAE,CAACP,QAAD,GAAY,OAAZ,GAAsB,OAFpB;AAE6BQ,YAAAA,YAAY,EAC5C;AAHG,WAAb;AAKI,UAAA,OAAO,EAAE,KAAKJ,UALlB;AAMI,UAAA,EAAE,EAAC,gBANP;AAOI,UAAA,SAAS,EAAC,eAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAYI;AAAM,UAAA,KAAK,EAAE;AACTE,YAAAA,eAAe,EAAEN,QAAQ,GAAG,WAAH,GAAiB,EADjC;AAETO,YAAAA,KAAK,EAAEP,QAAQ,GAAG,OAAH,GAAa;AAFnB,WAAb;AAII,UAAA,OAAO,EAAE,KAAKA,QAJlB;AAKI,UAAA,EAAE,EAAC,cALP;AAMI,UAAA,SAAS,EAAC,eANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAyBI,QAAC,QAAD;AAAA,kBACKA,QAAQ,gBACL;AAAK,UAAA,SAAS,EAAE,YAAhB;AAAA,iCACI;AAAI,YAAA,KAAK,EAAE;AAAES,cAAAA,OAAO,EAAE;AAAX,aAAX;AAAA,sBACH,KAAKC,KAAL,CAAWC,mBAAX,CAA+BC,GAA/B,CAAoCC,EAAD,iBAChC;AAAK,cAAA,SAAS,EAAC,mBAAf;AAAA,qCACI,QAAC,WAAD;AAAa,gBAAA,EAAE,EAAEA;AAAjB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBADH;AADG;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADK,gBAUL;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,iCACJ;AAAI,YAAA,KAAK,EAAE;AAAEJ,cAAAA,OAAO,EAAE;AAAX,aAAX;AAAA,sBACK,KAAKC,KAAL,CAAWI,qBAAX,CAAiCF,GAAjC,CAAsCC,EAAD,iBACnC;AAAK,cAAA,SAAS,EAAC,mBAAf;AAAA,qCACK,QAAC,WAAD;AAAa,gBAAA,EAAE,EAAEA;AAAjB;AAAA;AAAA;AAAA;AAAA;AADL;AAAA;AAAA;AAAA;AAAA,oBADF;AADL;AAAA;AAAA;AAAA;AAAA;AADI;AAAA;AAAA;AAAA;AAAA;AAXR;AAAA;AAAA;AAAA;AAAA,cAzBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAoDH;;AA/E6B;;AAkFlC,SAASE,eAAT,CAAyB;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,UAAb;AAAyBC,EAAAA;AAAzB,CAAzB,EAA2D;AAGvD;AACA,QAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYL,SAAZ,EACfM,IADe,CACV,CAACC,CAAD,EAAIC,CAAJ,KAAUR,SAAS,CAACQ,CAAD,CAAT,CAAaC,SAAb,GAAyBT,SAAS,CAACO,CAAD,CAAT,CAAaE,SADtC,CAApB;AAGA,QAAMC,iBAAiB,GAAGN,MAAM,CAACC,IAAP,CAAYH,KAAK,CAACD,UAAD,CAAL,CAAkBU,OAA9B,CAA1B;AAEA,QAAMhB,mBAAmB,GAAG,EAA5B;AAEA,QAAMG,qBAAqB,GAAG,EAA9B,CAXuD,CAcvD;;AACAK,EAAAA,WAAW,CAACP,GAAZ,CAAiBC,EAAD,IAAQ;AACpB,QAAIa,iBAAiB,CAACE,QAAlB,CAA2Bf,EAA3B,CAAJ,EAAoC;AAChCF,MAAAA,mBAAmB,CAACkB,IAApB,CAAyBhB,EAAzB;AACA,aAAOA,EAAP;AACH,KAHD,MAIK;AACDC,MAAAA,qBAAqB,CAACe,IAAtB,CAA2BhB,EAA3B;AACA,aAAOA,EAAP;AACH;AACJ,GATD;AAYA,SAAO;AACHM,IAAAA,WAAW,EAAEC,MAAM,CAACC,IAAP,CAAYL,SAAZ,EACRM,IADQ,CACH,CAACC,CAAD,EAAIC,CAAJ,KAAUR,SAAS,CAACQ,CAAD,CAAT,CAAaC,SAAb,GAAyBT,SAAS,CAACO,CAAD,CAAT,CAAaE,SAD7C,CADV;AAGHd,IAAAA,mBAHG;AAIHG,IAAAA;AAJG,GAAP;AAOH;;AACD,eAAelB,OAAO,CAACmB,eAAD,CAAP,CAA0BjB,SAA1B,CAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport { Fragment } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Pollresults from '../components/Pollresults'\r\n\r\nclass Dashboard extends Component {\r\n    state = {\r\n        answered: false,\r\n    }\r\n    answered = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (!this.state.answered) {\r\n\r\n            this.setState(() => ({\r\n                answered: !this.state.answered,\r\n            }))\r\n        }\r\n    }\r\n\r\n    unanswered = (e) => {\r\n        e.preventDefault();\r\n\r\n\r\n        if (this.state.answered) {\r\n            this.setState(() => ({\r\n                answered: !this.state.answered,\r\n            }))\r\n        }\r\n    }\r\n    render() {\r\n        const { answered } = this.state;\r\n        return (\r\n            <div className='dashboard'>\r\n                <h3 className='dashboard-title'> Your Questions</h3>\r\n                <nav className='dashboard-nav-bar'>\r\n                    <span style={{\r\n                        backgroundColor: !answered ? 'lightgray' : '',\r\n                        color: !answered ? 'white' : 'black', alignContent\r\n                            : 'center'\r\n                    }}\r\n                        onClick={this.unanswered}\r\n                        id='unanswered-nav'\r\n                        className=\"dashboard-nav\">\r\n\r\n                        Unanswered Questions\r\n          </span>\r\n                    <span style={{\r\n                        backgroundColor: answered ? 'lightgray' : '',\r\n                        color: answered ? 'white' : 'black'\r\n                    }}\r\n                        onClick={this.answered}\r\n                        id='answered-nav'\r\n                        className=\"dashboard-nav\">\r\n\r\n                        Answered Questions\r\n          </span>\r\n                </nav>\r\n                <Fragment>\r\n                    {answered ?\r\n                        <div className =\"diplayGrid\">\r\n                            <ul style={{ display: 'flow', }}>\r\n                        {this.props.answeredQuestionIds.map((id) => (\r\n                            <div className=\"displayGrid-items\">\r\n                                <Pollresults id={id} />\r\n                            </div>\r\n                        ))}\r\n                            </ul>\r\n                        </div> :\r\n                        <div className=\"diplayGrid\">\r\n                    <ul style={{ display: 'flow', }}>\r\n                        {this.props.unansweredQuestionIds.map((id) => (\r\n                           <div className=\"displayGrid-items\">\r\n                                <Pollresults id={id} />\r\n                            </div>\r\n                        ))}\r\n                            </ul>\r\n\r\n                        </div>\r\n                    }\r\n                </Fragment>\r\n\r\n              </div>\r\n            )\r\n    }\r\n\r\n}\r\nfunction mapStateToProps({ questions, authedUser, users }) {\r\n\r\n\r\n    //sort by timestamp\r\n    const questionIds = Object.keys(questions)\r\n        .sort((a, b) => questions[b].timestamp - questions[a].timestamp);\r\n\r\n    const authedUserAnswers = Object.keys(users[authedUser].answers);\r\n\r\n    const answeredQuestionIds = [];\r\n\r\n    const unansweredQuestionIds = [];\r\n\r\n\r\n    //sorts questions into answered and unanswered arrays\r\n    questionIds.map((id) => {\r\n        if (authedUserAnswers.includes(id)) {\r\n            answeredQuestionIds.push(id);\r\n            return id;\r\n        }\r\n        else {\r\n            unansweredQuestionIds.push(id);\r\n            return id;\r\n        }\r\n    })\r\n\r\n\r\n    return {\r\n        questionIds: Object.keys(questions)\r\n            .sort((a, b) => questions[b].timestamp - questions[a].timestamp),\r\n        answeredQuestionIds,\r\n        unansweredQuestionIds,\r\n\r\n    }\r\n}\r\nexport default connect(mapStateToProps) (Dashboard)\r\n"]},"metadata":{},"sourceType":"module"}