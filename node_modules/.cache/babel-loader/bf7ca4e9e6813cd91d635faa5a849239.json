{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\navya\\\\Desktop\\\\Navya_UI\\\\Wyrather\\\\wyr\\\\src\\\\components\\\\App.js\";\nimport React, { Component, Fragment } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { handleInitialData } from '../actions/shared';\nimport LoadingBar from 'react-redux-loading';\nimport Nav from '../components/Nav';\nimport Login from '../components/Login';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  //when component mounts we want to dispatch invocation of handleInitialData action creator\n  componentDidMount() {\n    this.props.dispatch(handleInitialData());\n  }\n\n  render() {\n    const loggedOut = this.props.authedUser === '' || !this.props.authedUser;\n    console.log(this.props.user);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: loggedOut ? /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(Router, {\n        children: /*#__PURE__*/_jsxDEV(Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(LoadingBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container\",\n            children: [\"//NEED TO CHANGE !== TO === LATER\", \"}\", /*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/\",\n              exact: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/add\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/leaderboard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/question/:id\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps({\n  authedUser\n}) {\n  return {\n    //loading will be true if null\n    loading: authedUser === null,\n    authedUser\n  };\n} //we need to connect our App component  to get invocation \n\n\nexport default connect(mapStateToProps)(App);","map":{"version":3,"sources":["C:/Users/navya/Desktop/Navya_UI/Wyrather/wyr/src/components/App.js"],"names":["React","Component","Fragment","BrowserRouter","Router","Route","connect","handleInitialData","LoadingBar","Nav","Login","App","componentDidMount","props","dispatch","render","loggedOut","authedUser","console","log","user","mapStateToProps","loading"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAmCC,KAAnC,QAAgD,kBAAhD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAO,WAAP;;;AAIA,MAAMC,GAAN,SAAkBV,SAAlB,CAA4B;AACxB;AACAW,EAAAA,iBAAiB,GAAG;AAEhB,SAAKC,KAAL,CAAWC,QAAX,CAAoBP,iBAAiB,EAArC;AAEH;;AACDQ,EAAAA,MAAM,GAAG;AACL,UAAMC,SAAS,GAAI,KAAKH,KAAL,CAAWI,UAAX,KAA0B,EAA3B,IAAkC,CAAC,KAAKJ,KAAL,CAAWI,UAAhE;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,KAAL,CAAWO,IAAvB;AACA,wBACI;AAAA,gBACMJ,SAAS,gBACL,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,cADK,gBAGP,QAAC,MAAD;AAAA,+BACI,QAAC,QAAD;AAAA,kCACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA,8EAYA,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,oBAZA,eAaI,QAAC,KAAD;AAAO,cAAA,IAAI,EAAC,GAAZ;AAAgB,cAAA,KAAK;AAArB;AAAA;AAAA;AAAA;AAAA,oBAbJ,eAcI,QAAC,KAAD;AAAO,cAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,oBAdJ,eAeI,QAAC,KAAD;AAAO,cAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,oBAfJ,eAgBI,QAAC,KAAD;AAAO,cAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,oBAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAJR;AAAA;AAAA;AAAA;AAAA,YADJ;AAgCH;;AA1CuB;;AA6C5B,SAASK,eAAT,CAAyB;AAAEJ,EAAAA;AAAF,CAAzB,EAAyC;AACrC,SAAO;AACH;AACJK,IAAAA,OAAO,EAAGL,UAAU,KAAK,IAFlB;AAGJA,IAAAA;AAHI,GAAP;AAMH,C,CACD;;;AACA,eAAeX,OAAO,CAACe,eAAD,CAAP,CAA0BV,GAA1B,CAAf","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { BrowserRouter as Router , Route } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { handleInitialData } from '../actions/shared'\nimport LoadingBar from 'react-redux-loading'\nimport Nav from '../components/Nav'\nimport Login from '../components/Login'\nimport './App.css'\n\n\n\nclass App extends Component {\n    //when component mounts we want to dispatch invocation of handleInitialData action creator\n    componentDidMount() {\n\n        this.props.dispatch(handleInitialData())\n\r\n    }\n    render() {\n        const loggedOut = (this.props.authedUser === '') || !this.props.authedUser\r\n        console.log(this.props.user)\n        return (\n            <div>\n                { loggedOut\r\n                    ? <Login />\n                    :\n                    <Router>\n                        <Fragment>\n                            <LoadingBar />\n                            <div className=\"container\">\n                                //NEED TO CHANGE !== TO === LATER\n                  {/*//  {this.props.authedUser !== true*/}\n                                {/*//              ? (<Route path=\"/\" component={Login}></Route>)*/}\r\n                                {/*              : <div>*/}\r\n                                {/*                  <Nav />*/}\r\n                                {/*                  <Route path='/' exact />*/}\r\n                                {/*                  <Route path='/add' />*/}\r\n                                {/*                  <Route path='/leaderboard' />*/}\r\n                                {/*                  <Route path='/question/:id' />*/}\r\n                                {/*              </div>*/}\r\n                            }\n                            <Nav />\r\n                                <Route path='/' exact />\r\n                                <Route path='/add' />\r\n                                <Route path='/leaderboard' />\r\n                                <Route path='/question/:id' />\n                            </div>\n                        </Fragment>\n                    </Router>\n                }\n            </div>\n        );\n        \n    }\n}\n\nfunction mapStateToProps({ authedUser }) {\r\n    return {\r\n        //loading will be true if null\r\n    loading : authedUser === null,\r\n       authedUser,\r\n       }\r\n\r\n}\n//we need to connect our App component  to get invocation \nexport default connect(mapStateToProps) (App)\n"]},"metadata":{},"sourceType":"module"}