{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\navya\\\\Desktop\\\\Navya_UI\\\\Wyrather\\\\wyr\\\\src\\\\components\\\\Questionsanswered.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport images from './images/images';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Questionsanswered extends Component {\n  render() {\n    const {\n      author,\n      question,\n      authedUser\n    } = this.props;\n    const image = author.avatarURL;\n    const optionOneText = question.optionOne.text;\n    const optionTwoText = question.optionTwo.text;\n    let isAuthedUserOptionOne = question.optionOne.votes.indexOf(authedUser) >= 0;\n    const optionOneVotes = question.optionOne.votes.length;\n    const optionTwoVotes = question.optionTwo.votes.length;\n    const optionOnePercent = Math.round(optionOneVotes / (optionOneVotes + optionTwoVotes) * 100) + '%';\n    const optionTwoPercent = Math.round(optionTwoVotes / (optionOneVotes + optionTwoVotes) * 100) + '%';\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '0px auto'\n      },\n      className: \"result-component\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-header\",\n        style: {\n          display: 'block'\n        },\n        children: [author.name, \" asks:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"avatar\",\n        src: images[image],\n        alt: `avatar of ${author.name}`,\n        style: {\n          display: 'inline-block',\n          height: '150px',\n          width: '175px',\n          marginTop: '25px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            display: 'block'\n          },\n          children: \"Results:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"percentage-card\",\n          id: \"option-one-percentage\",\n          style: {\n            backgroundColor: isAuthedUserOptionOne ? 'aqua' : 'azure'\n          },\n          children: ['Would you rather ' + optionOneText + '?', /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"percentage-bar\",\n            style: {\n              width: '100%',\n              backgroundColor: 'grey'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"percentage-filler\",\n              style: {\n                height: '30px',\n                backgroundColor: 'green',\n                width: optionOnePercent,\n                textAlign: 'center'\n              },\n              children: optionOnePercent\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"percentage-label\",\n              style: {\n                textAlign: 'center'\n              },\n              children: `${optionOneVotes} out of ${optionOneVotes + optionTwoVotes} votes`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"percentage-card\",\n          id: \"option-two-percentage\",\n          style: {\n            backgroundColor: !isAuthedUserOptionOne ? 'aqua' : 'azure'\n          },\n          children: ['Would you rather ' + optionTwoText + '?', /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"percentage-bar\",\n            style: {\n              width: '100%',\n              backgroundColor: 'grey'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"percentage-filler\",\n              style: {\n                height: '30px',\n                backgroundColor: 'green',\n                width: optionTwoPercent,\n                textAlign: 'center'\n              },\n              children: optionTwoPercent\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"percentage-label\",\n              style: {\n                textAlign: 'center'\n              },\n              children: `${optionTwoVotes} out of ${optionOneVotes + optionTwoVotes} votes`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps({\n  authedUser,\n  questions,\n  users\n}, {\n  id\n}) {\n  return {\n    authedUser,\n    author: users[questions[id].author],\n    question: questions[id],\n    id\n  };\n}\n\nexport default connect(mapStateToProps)(Questionsanswered);","map":{"version":3,"sources":["C:/Users/navya/Desktop/Navya_UI/Wyrather/wyr/src/components/Questionsanswered.js"],"names":["React","Component","connect","images","Questionsanswered","render","author","question","authedUser","props","image","avatarURL","optionOneText","optionOne","text","optionTwoText","optionTwo","isAuthedUserOptionOne","votes","indexOf","optionOneVotes","length","optionTwoVotes","optionOnePercent","Math","round","optionTwoPercent","margin","display","name","height","width","marginTop","backgroundColor","textAlign","mapStateToProps","questions","users","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport images from './images/images'\r\n\r\nclass Questionsanswered extends Component {\r\n    render() {\r\n        const { author, question, authedUser } = this.props;\r\n        const image = author.avatarURL;\r\n\r\n        const optionOneText = question.optionOne.text;\r\n        const optionTwoText = question.optionTwo.text;\r\n\r\n        let isAuthedUserOptionOne =\r\n            question.optionOne.votes.indexOf(authedUser) >= 0;\r\n\r\n        const optionOneVotes = question.optionOne.votes.length;\r\n\r\n        const optionTwoVotes = question.optionTwo.votes.length;\r\n\r\n        const optionOnePercent =\r\n            Math.round(optionOneVotes / (optionOneVotes + optionTwoVotes) * 100) + '%';\r\n\r\n        const optionTwoPercent =\r\n            Math.round(optionTwoVotes / (optionOneVotes + optionTwoVotes) * 100)\r\n            + '%';\r\n\r\n        return (\r\n            <div\r\n                style={{\r\n                    \r\n                    margin: '0px auto'\r\n                }}\r\n                className='result-component'>\r\n                <div\r\n                    className='question-header'\r\n                    style={{ display: 'block' }}\r\n                >\r\n                    {author.name} asks:\r\n        </div>\r\n                <img\r\n                    className='avatar'\r\n                    src={images[image]}\r\n                    alt={`avatar of ${author.name}`}\r\n                    style={{\r\n                        display: 'inline-block',\r\n                        height: '150px',\r\n                        width: '175px',\r\n                        marginTop: '25px'\r\n                    }}\r\n                />\r\n\r\n                <div className='results'>\r\n                    <h2 style={{ display: 'block' }}>\r\n                        Results:\r\n          </h2>\r\n                    <div\r\n                        className='percentage-card'\r\n                        id='option-one-percentage'\r\n                        style={{\r\n                            backgroundColor: isAuthedUserOptionOne ?\r\n                                'aqua' :\r\n                                'azure'\r\n                        }}>\r\n                        {'Would you rather ' + optionOneText + '?'}\r\n                        <div className='percentage-bar'\r\n                            style={{\r\n                                width: '100%',\r\n                                backgroundColor: 'grey',\r\n                            }}>\r\n                            <div className='percentage-filler'\r\n                                style={{\r\n                                    height: '30px',\r\n                                    backgroundColor: 'green',\r\n                                    width: optionOnePercent,\r\n                                    textAlign: 'center'\r\n                                }} >\r\n                                {optionOnePercent}\r\n                            </div>\r\n                            <div className='percentage-label'\r\n                                style={{ textAlign: 'center', }}>\r\n                                {`${optionOneVotes} out of ${optionOneVotes + optionTwoVotes} votes`}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div\r\n                        className='percentage-card'\r\n                        id='option-two-percentage'\r\n                        style={{\r\n                            backgroundColor: !isAuthedUserOptionOne ?\r\n                                'aqua' :\r\n                                'azure'\r\n                        }}>\r\n                        {'Would you rather ' + optionTwoText + '?'}\r\n                        <div className='percentage-bar'\r\n                            style={{\r\n                                width: '100%',\r\n                                backgroundColor: 'grey',\r\n                            }}>\r\n                            <div className='percentage-filler'\r\n                                style={{\r\n                                    height: '30px',\r\n                                    backgroundColor: 'green',\r\n                                    width: optionTwoPercent,\r\n                                    textAlign: 'center'\r\n                                }} >\r\n                                {optionTwoPercent}\r\n                            </div>\r\n                            <div className='percentage-label'\r\n                                style={{ textAlign: 'center', }}>\r\n                                {`${optionTwoVotes} out of ${optionOneVotes + optionTwoVotes} votes`}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({ authedUser, questions, users }, { id }) {\r\n    return {\r\n        authedUser,\r\n        author: users[questions[id].author],\r\n        question: questions[id],\r\n        id,\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Questionsanswered)"]},"metadata":{},"sourceType":"module"}