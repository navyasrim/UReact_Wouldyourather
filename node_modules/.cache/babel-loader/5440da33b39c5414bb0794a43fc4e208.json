{"ast":null,"code":"import { RECEIVE_USERS } from '../actions/users';\nimport { ADD_NEW_QUESTION } from '../actions/users';\nimport { ANSWER_QUESTION } from '../actions/users';\nimport produce from 'immer'; //default state is assigned with empty object\n\nexport default function users(state = {}, action) {\n  switch (action.type) {\n    case RECEIVE_USERS:\n      return { //new state of user slice has everything which is empty obj also\n        ...state,\n        //all of the users grabbing from the action\n        ...action.users\n      };\n\n    case ADD_NEW_QUESTION:\n      const {\n        question\n      } = action;\n      const id = question.id;\n      const author = question.author;\n      const oldUserInfo = state[author];\n      return { ...state,\n        [author]: { ...oldUserInfo,\n          questions: oldUserInfo.questions.concat([id])\n        }\n      };\n\n    case ANSWER_QUESTION:\n      const {\n        qid,\n        answer,\n        authedUser\n      } = action;\n      console.log('produce: ', action);\n      return produce(authedUser, draft => {\n        draft.qid = answer;\n        console.log('produce draft: ', answer);\n      });\n\n    /* return {*/\n    //...state,\n    //[authedUser]:\n    //{\n    //    ...state[authedUser],\n    //    answers:\n    //    {\n    //        ...state[authedUser].answers,\n    //        [qid]: answer,\n    //    }\n    //}\n\n    /* }*/\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/navya/Desktop/Navya_UI/Wyrather/wyr/src/reducers/users.js"],"names":["RECEIVE_USERS","ADD_NEW_QUESTION","ANSWER_QUESTION","produce","users","state","action","type","question","id","author","oldUserInfo","questions","concat","qid","answer","authedUser","console","log","draft"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,OAAQC,OAAR,MAAsB,OAAtB,C,CAGA;;AACA,eAAe,SAASC,KAAT,CAAeC,KAAK,GAAG,EAAvB,EAA2BC,MAA3B,EAAmC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,aAAL;AACI,aAAO,EACH;AACA,WAAGK,KAFA;AAGH;AACA,WAAGC,MAAM,CAACF;AAJP,OAAP;;AAMJ,SAAKH,gBAAL;AACI,YAAM;AAAEO,QAAAA;AAAF,UAAeF,MAArB;AACA,YAAMG,EAAE,GAAGD,QAAQ,CAACC,EAApB;AACA,YAAMC,MAAM,GAAGF,QAAQ,CAACE,MAAxB;AACA,YAAMC,WAAW,GAAGN,KAAK,CAACK,MAAD,CAAzB;AACA,aAAO,EACH,GAAGL,KADA;AAEH,SAACK,MAAD,GACA,EACI,GAAGC,WADP;AAEIC,UAAAA,SAAS,EAAED,WAAW,CAACC,SAAZ,CAAsBC,MAAtB,CAA6B,CAACJ,EAAD,CAA7B;AAFf;AAHG,OAAP;;AAQJ,SAAKP,eAAL;AACI,YAAM;AAAEY,QAAAA,GAAF;AAAOC,QAAAA,MAAP;AAAeC,QAAAA;AAAf,UAA8BV,MAApC;AACAW,MAAAA,OAAO,CAACC,GAAR,CACI,WADJ,EACiBZ,MADjB;AAGA,aAAOH,OAAO,CAACa,UAAD,EAAaG,KAAK,IAAI;AAChCA,QAAAA,KAAK,CAACL,GAAN,GAAYC,MAAZ;AACAE,QAAAA,OAAO,CAACC,GAAR,CACI,iBADJ,EACuBH,MADvB;AAGH,OALa,CAAd;;AAMD;AAEK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACL;;AAEH;AACI,aAAOV,KAAP;AA/CR;AAkDH","sourcesContent":["import { RECEIVE_USERS } from '../actions/users'\r\nimport { ADD_NEW_QUESTION } from '../actions/users'\r\nimport { ANSWER_QUESTION } from '../actions/users'\r\nimport  produce  from 'immer'\r\n\r\n\r\n//default state is assigned with empty object\r\nexport default function users(state = {}, action) {\r\n    switch (action.type) {\r\n        case RECEIVE_USERS:\r\n            return {\r\n                //new state of user slice has everything which is empty obj also\r\n                ...state,\r\n                //all of the users grabbing from the action\r\n                ...action.users\r\n            }\r\n        case ADD_NEW_QUESTION:\r\n            const { question } = action;\r\n            const id = question.id;\r\n            const author = question.author;\r\n            const oldUserInfo = state[author];\r\n            return {\r\n                ...state,\r\n                [author]:\r\n                {\r\n                    ...oldUserInfo,\r\n                    questions: oldUserInfo.questions.concat([id]),\r\n                }\r\n            }\r\n        case ANSWER_QUESTION:\r\n            const { qid, answer, authedUser } = action;\r\n            console.log(\r\n                'produce: ', action\r\n            );\r\n            return produce(authedUser, draft => {\r\n                draft.qid = answer;\r\n                console.log(\r\n                    'produce draft: ', answer\r\n                );\r\n            })\r\n           /* return {*/\r\n              \r\n                //...state,\r\n                //[authedUser]:\r\n                //{\r\n                //    ...state[authedUser],\r\n                //    answers:\r\n                //    {\r\n                //        ...state[authedUser].answers,\r\n                //        [qid]: answer,\r\n                //    }\r\n                //}\r\n           /* }*/\r\n       \r\n        default:\r\n            return state\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}